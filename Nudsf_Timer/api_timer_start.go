/*
 * Nudsf_Timer
 *
 * Nudsf Timer Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * Source file: 3GPP TS 29.598 UDSF Services, V17.6.0.
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.598/
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package Nudsf_Timer

import (
    "bitbucket.org/free5GC/openapi"
    "bitbucket.org/free5GC/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
	"fmt"
)

// Linger please
var (
	_ context.Context
)

type TimerStartApiService service

/*
TimerStartApiService Create/Replace Timer
Create or Modify a Timer with a user provided TimerId
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param RealmId - Identifier(name) of the Realm
 * @param StorageId - Identifier of the Storage
 * @param TimerId - Identifier of the Timer
 * @param Timer - 
 * @param SupportedFeatures - Features required to be supported by the target NF

@return CreateOrModifyTimerResponse
*/

// CreateOrModifyTimerRequest
type CreateOrModifyTimerRequest struct {
    RealmId *string
    StorageId *string
    TimerId *string
    Timer *models.Timer
    SupportedFeatures *string
}

func (r *CreateOrModifyTimerRequest) SetRealmId(RealmId string) {
    r.RealmId = &RealmId
}
func (r *CreateOrModifyTimerRequest) SetStorageId(StorageId string) {
    r.StorageId = &StorageId
}
func (r *CreateOrModifyTimerRequest) SetTimerId(TimerId string) {
    r.TimerId = &TimerId
}
func (r *CreateOrModifyTimerRequest) SetTimer(Timer models.Timer) {
    r.Timer = &Timer
}
func (r *CreateOrModifyTimerRequest) SetSupportedFeatures(SupportedFeatures string) {
    r.SupportedFeatures = &SupportedFeatures
}

func (a *TimerStartApiService) CreateOrModifyTimer(ctx context.Context, request *CreateOrModifyTimerRequest) (*CreateOrModifyTimerResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Put")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateOrModifyTimerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{realmId}/{storageId}/timers/{timerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"realmId"+"}", fmt.Sprintf("%v", request.RealmId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", fmt.Sprintf("%v", request.StorageId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"timerId"+"}", fmt.Sprintf("%v", request.TimerId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	
    if request.SupportedFeatures != nil {
        
        localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, ""))
    } 
    localVarHTTPContentTypes := []string{ "application/json" }
    
    localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{ "application/problem+json" }

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}



	// body params
	localVarPostBody = request.Timer


	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

    apiError := openapi.GenericOpenAPIError{
        RawBody:     localVarBody,
        ErrorStatus: localVarHTTPResponse.StatusCode,
    }

    switch localVarHTTPResponse.StatusCode {
        case 201:
        return &localVarReturnValue, apiError
        case 204:
        return &localVarReturnValue, apiError
        case 400:
            var v CreateOrModifyTimerError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 401:
            var v CreateOrModifyTimerError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 403:
            var v CreateOrModifyTimerError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 404:
            var v CreateOrModifyTimerError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 500:
            var v CreateOrModifyTimerError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 503:
            var v CreateOrModifyTimerError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        default:
        return &localVarReturnValue, apiError
    }
}

type CreateOrModifyTimerResponse struct {
        }

type CreateOrModifyTimerError struct {
         models.ProblemDetails
}
